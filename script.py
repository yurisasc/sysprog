from azure.storage.blob import BlockBlobService
from azure.storage.blob import ContentSettings
from picamera import PiCamera
import cognitive_face as CF
import requests
from io import BytesIO
from PIL import Image, ImageDraw

COGNITIVE_KEY = 'd58695a9ad2f4ac999b21d346be60a75'
BASE_URL = 'https://southeastasia.api.cognitive.microsoft.com/face/v1.0/'
BLOB_NAME = 'piblobsysprog'
BLOB_KEY = '4QPW8SgtgLohZCI8edjPMShh4czDRZvMIPJ/3NPNigxy7VQ82PEK0szFS0CfLxVAPAzEsEwdMjLDCKDX2pywbg=='
CONTAINER_NAME = 'webcamupload'
IMAGE_NAME = 'test.jpg'

# Converrt width height to a point in a rectangle
def getRectangle(faceDictionary):
    rect = faceDictionary['faceRectangle']
    left = rect['left']
    top = rect['top']
    bottom = left + rect['height']
    right = top + rect['width']
    return ((left, top), (bottom, right))

# Capture using raspi camera
camera = PiCamera()
camera.capture('image1.jpg')
print('Captured image.')

# Upload photo to azure blob container
block_blob_service = BlockBlobService(account_name=BLOB_NAME, account_key=BLOB_KEY)

block_blob_service.create_blob_from_path(
    'webcamupload',
    IMAGE_NAME,
    'image1.jpg',
    content_settings=ContentSettings(content_type='image/jpeg'))
print('Uploaded image.')

# Prepare cognitive service
CF.Key.set(COGNITIVE_KEY)
CF.BaseUrl.set(BASE_URL)

img_url = 'https://piblobsysprog.blob.core.windows.net/webcamupload/test.'
##img_url = 'https://www.how-old.net/Images/faces2/main001.jpg'

faces = CF.face.detect(img_url)

print('There are ' + str(len(faces)) + ' person in the room.')

# Download the image from the url
response = requests.get(img_url)
img = Image.open(BytesIO(response.content))

# For each face returned, use the face rectangle and draw a red box
draw = ImageDraw.Draw(img)
for face in faces:
    draw.rectangle(getRectangle(face), outline='red')

# Display the image
img.show()
